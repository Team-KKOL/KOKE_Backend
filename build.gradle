plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.koke'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    developmentOnly
    asciidoctorExt
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

def generated = "src/main/generated"

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.jcraft:jsch:0.1.55'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    implementation 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.1'
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'
    implementation 'org.seleniumhq.selenium:selenium-java:4.7.2'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-text:1.10.0'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'net.coobird:thumbnailator:0.4.18'
    implementation 'commons-fileupload:commons-fileupload:1.5'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
    implementation 'com.navercorp.fixturemonkey:fixture-monkey:0.4.10'
    implementation 'com.navercorp.fixturemonkey:fixture-monkey-jakarta-validation:0.4.10'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    annotationProcessor (
            "org.springframework.boot:spring-boot-configuration-processor",
            'org.mapstruct:mapstruct-processor:1.5.3.Final',
            "org.projectlombok:lombok-mapstruct-binding:0.2.0",
            "org.projectlombok:lombok",
            "com.querydsl:querydsl-apt:5.0.0:jakarta",
            "jakarta.persistence:jakarta.persistence-api",
            "jakarta.annotation:jakarta.annotation-api"
    )
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor (
            "org.springframework.boot:spring-boot-configuration-processor",
            'org.mapstruct:mapstruct-processor:1.5.3.Final',
            "org.projectlombok:lombok-mapstruct-binding:0.2.0",
            "org.projectlombok:lombok"
    )
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.testcontainers:testcontainers:1.17.6'
    testImplementation "org.testcontainers:mariadb:1.17.6"
    testImplementation "org.testcontainers:junit-jupiter:1.17.6"
    testImplementation "org.junit.jupiter:junit-jupiter:5.9.0"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.navercorp.fixturemonkey:fixture-monkey-junit-jupiter:0.4.10'
}

sourceSets {
    main.java.srcDirs += [generated]
}

tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorGeneratedSourcesDirectory(file(generated))
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

asciidoctor {
    dependsOn test
    configurations 'asciidoctorExt'
    inputs.dir snippetsDir

    // source가 없으면 .adoc파일을 전부 html로 만들어버림
    // source 지정시 특정 adoc만 HTML로 만든다.
    sources{
        include("**/index.adoc","**/common/*.adoc")
    }
}

// static/docs 폴더 비우기
asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

// asccidoctor 작업 이후 생성된 HTML 파일을 static/docs 로 copy
task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

// build 의 의존작업 명시
build {
    dependsOn copyDocument
}
